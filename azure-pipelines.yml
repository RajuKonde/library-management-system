# Azure DevOps Pipeline for Library Management System
# Builds the Java project and deploys it to a local Tomcat server via a self-hosted agent.

trigger:
  - main

pool:
  name: Default # This is the name of your self-hosted agent pool

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: BuildJob
        displayName: 'Build and Package Application'
        steps:
          - task: Maven@3
            displayName: 'Build with Maven'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests=true' # Skipping tests for faster builds, can be enabled later
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'

          - task: CopyFiles@2
            displayName: 'Copy JAR to Artifact Staging'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/target'
              Contents: '*.jar'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: Deploy
    displayName: 'Deploy Stage'
    dependsOn: Build
    jobs:
      - job: DeployJob
        displayName: 'Deploy to Local Tomcat'
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - script: |
              echo "Starting deployment to local Tomcat server..."
              
              # --- IMPORTANT: Verify this is your correct Tomcat path ---
              TOMCAT_PATH="/opt/banking/apache-tomcat-10.1.23"
              
              # Find the new JAR file
              JAR_FILE=$(find $(System.ArtifactsDirectory)/drop -name "*.jar")
              echo "Found JAR file: $JAR_FILE"
              
              # Stop Tomcat
              echo "Stopping Tomcat..."
              $TOMCAT_PATH/bin/shutdown.sh
              sleep 10 # Wait for Tomcat to shut down
              
              # Clean old deployments
              echo "Cleaning old application files..."
              rm -rf $TOMCAT_PATH/webapps/librarymanagement-0.0.1-SNAPSHOT.jar
              rm -rf $TOMCAT_PATH/webapps/librarymanagement-0.0.1-SNAPSHOT
              
              # Deploy the new JAR file by renaming it to ROOT.war or a specific name
              # For a Spring Boot JAR, we can just copy it. Let's rename it for clarity.
              echo "Copying new JAR file to Tomcat webapps..."
              cp $JAR_FILE $TOMCAT_PATH/webapps/library.jar
              
              # Start Tomcat
              echo "Starting Tomcat..."
              $TOMCAT_PATH/bin/startup.sh
              
              echo "Deployment complete."
            displayName: 'Run Deployment Script'